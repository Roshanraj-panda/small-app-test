// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package generated

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[generated.Foo](node)
val document = scalaxb.toXML[generated.Foo](obj, "foo", generated.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Generated_PersonInfoBillToFormat: scalaxb.XMLFormat[generated.PersonInfoBillTo] = new DefaultGenerated_PersonInfoBillToFormat {}
  implicit lazy val Generated_PersonInfoShipToFormat: scalaxb.XMLFormat[generated.PersonInfoShipTo] = new DefaultGenerated_PersonInfoShipToFormat {}
  implicit lazy val Generated_ItemFormat: scalaxb.XMLFormat[generated.Item] = new DefaultGenerated_ItemFormat {}
  implicit lazy val Generated_PersonInfoShipTo2Format: scalaxb.XMLFormat[generated.PersonInfoShipTo2] = new DefaultGenerated_PersonInfoShipTo2Format {}
  implicit lazy val Generated_LinePriceInfoFormat: scalaxb.XMLFormat[generated.LinePriceInfo] = new DefaultGenerated_LinePriceInfoFormat {}
  implicit lazy val Generated_LineChargeFormat: scalaxb.XMLFormat[generated.LineCharge] = new DefaultGenerated_LineChargeFormat {}
  implicit lazy val Generated_LineChargesFormat: scalaxb.XMLFormat[generated.LineCharges] = new DefaultGenerated_LineChargesFormat {}
  implicit lazy val Generated_LineTaxFormat: scalaxb.XMLFormat[generated.LineTax] = new DefaultGenerated_LineTaxFormat {}
  implicit lazy val Generated_LineTaxesFormat: scalaxb.XMLFormat[generated.LineTaxes] = new DefaultGenerated_LineTaxesFormat {}
  implicit lazy val Generated_OrderDateFormat: scalaxb.XMLFormat[generated.OrderDate] = new DefaultGenerated_OrderDateFormat {}
  implicit lazy val Generated_OrderDatesFormat: scalaxb.XMLFormat[generated.OrderDates] = new DefaultGenerated_OrderDatesFormat {}
  implicit lazy val Generated_ExtnFormat: scalaxb.XMLFormat[generated.Extn] = new DefaultGenerated_ExtnFormat {}
  implicit lazy val Generated_OrderLineFormat: scalaxb.XMLFormat[generated.OrderLine] = new DefaultGenerated_OrderLineFormat {}
  implicit lazy val Generated_OrderLinesFormat: scalaxb.XMLFormat[generated.OrderLines] = new DefaultGenerated_OrderLinesFormat {}
  implicit lazy val Generated_PaymentDetailsFormat: scalaxb.XMLFormat[generated.PaymentDetails] = new DefaultGenerated_PaymentDetailsFormat {}
  implicit lazy val Generated_PersonInfoBillTo2Format: scalaxb.XMLFormat[generated.PersonInfoBillTo2] = new DefaultGenerated_PersonInfoBillTo2Format {}
  implicit lazy val Generated_PaymentMethodFormat: scalaxb.XMLFormat[generated.PaymentMethod] = new DefaultGenerated_PaymentMethodFormat {}
  implicit lazy val Generated_PaymentMethodsFormat: scalaxb.XMLFormat[generated.PaymentMethods] = new DefaultGenerated_PaymentMethodsFormat {}
  implicit lazy val Generated_OrderHoldTypeFormat: scalaxb.XMLFormat[generated.OrderHoldType] = new DefaultGenerated_OrderHoldTypeFormat {}
  implicit lazy val Generated_OrderHoldTypesFormat: scalaxb.XMLFormat[generated.OrderHoldTypes] = new DefaultGenerated_OrderHoldTypesFormat {}
  implicit lazy val Generated_HbcOrderHeaderAttrFormat: scalaxb.XMLFormat[generated.HbcOrderHeaderAttr] = new DefaultGenerated_HbcOrderHeaderAttrFormat {}
  implicit lazy val Generated_HbcOrderHeaderAttrListFormat: scalaxb.XMLFormat[generated.HbcOrderHeaderAttrList] = new DefaultGenerated_HbcOrderHeaderAttrListFormat {}
  implicit lazy val Generated_Extn2Format: scalaxb.XMLFormat[generated.Extn2] = new DefaultGenerated_Extn2Format {}
  implicit lazy val Generated_OrderFormat: scalaxb.XMLFormat[generated.Order] = new DefaultGenerated_OrderFormat {}
  implicit lazy val Generated_OrderListFormat: scalaxb.XMLFormat[generated.OrderList] = new DefaultGenerated_OrderListFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("OrderList"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.OrderList](elem)))

      case _ => None
    }

  }

  trait DefaultGenerated_PersonInfoBillToFormat extends scalaxb.XMLFormat[generated.PersonInfoBillTo] with scalaxb.CanWriteChildNodes[generated.PersonInfoBillTo] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.PersonInfoBillTo] = seq match {
      case node: scala.xml.Node => Right(generated.PersonInfoBillTo(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@AddressLine1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine1" -> _ },
        (node \ "@City").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@City" -> _ },
        (node \ "@Country").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Country" -> _ },
        (node \ "@DayPhone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@DayPhone" -> _ },
        (node \ "@EMailID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EMailID" -> _ },
        (node \ "@FirstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FirstName" -> _ },
        (node \ "@LastName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LastName" -> _ },
        (node \ "@State").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@State" -> _ },
        (node \ "@ZipCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ZipCode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.PersonInfoBillTo, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@AddressLine1", _) => __obj.AddressLine1 foreach { x => attr = scala.xml.Attribute(null, "AddressLine1", x.toString, attr) }
        case ("@City", _) => __obj.City foreach { x => attr = scala.xml.Attribute(null, "City", x.toString, attr) }
        case ("@Country", _) => __obj.Country foreach { x => attr = scala.xml.Attribute(null, "Country", x.toString, attr) }
        case ("@DayPhone", _) => __obj.DayPhone foreach { x => attr = scala.xml.Attribute(null, "DayPhone", x.toString, attr) }
        case ("@EMailID", _) => __obj.EMailID foreach { x => attr = scala.xml.Attribute(null, "EMailID", x.toString, attr) }
        case ("@FirstName", _) => __obj.FirstName foreach { x => attr = scala.xml.Attribute(null, "FirstName", x.toString, attr) }
        case ("@LastName", _) => __obj.LastName foreach { x => attr = scala.xml.Attribute(null, "LastName", x.toString, attr) }
        case ("@State", _) => __obj.State foreach { x => attr = scala.xml.Attribute(null, "State", x.toString, attr) }
        case ("@ZipCode", _) => __obj.ZipCode foreach { x => attr = scala.xml.Attribute(null, "ZipCode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.PersonInfoBillTo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_PersonInfoShipToFormat extends scalaxb.XMLFormat[generated.PersonInfoShipTo] with scalaxb.CanWriteChildNodes[generated.PersonInfoShipTo] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.PersonInfoShipTo] = seq match {
      case node: scala.xml.Node => Right(generated.PersonInfoShipTo(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@AddressLine1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine1" -> _ },
        (node \ "@AddressLine2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine2" -> _ },
        (node \ "@City").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@City" -> _ },
        (node \ "@Country").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Country" -> _ },
        (node \ "@DayPhone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@DayPhone" -> _ },
        (node \ "@EMailID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EMailID" -> _ },
        (node \ "@FirstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FirstName" -> _ },
        (node \ "@LastName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LastName" -> _ },
        (node \ "@State").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@State" -> _ },
        (node \ "@ZipCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ZipCode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.PersonInfoShipTo, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@AddressLine1", _) => __obj.AddressLine1 foreach { x => attr = scala.xml.Attribute(null, "AddressLine1", x.toString, attr) }
        case ("@AddressLine2", _) => __obj.AddressLine2 foreach { x => attr = scala.xml.Attribute(null, "AddressLine2", x.toString, attr) }
        case ("@City", _) => __obj.City foreach { x => attr = scala.xml.Attribute(null, "City", x.toString, attr) }
        case ("@Country", _) => __obj.Country foreach { x => attr = scala.xml.Attribute(null, "Country", x.toString, attr) }
        case ("@DayPhone", _) => __obj.DayPhone foreach { x => attr = scala.xml.Attribute(null, "DayPhone", x.toString, attr) }
        case ("@EMailID", _) => __obj.EMailID foreach { x => attr = scala.xml.Attribute(null, "EMailID", x.toString, attr) }
        case ("@FirstName", _) => __obj.FirstName foreach { x => attr = scala.xml.Attribute(null, "FirstName", x.toString, attr) }
        case ("@LastName", _) => __obj.LastName foreach { x => attr = scala.xml.Attribute(null, "LastName", x.toString, attr) }
        case ("@State", _) => __obj.State foreach { x => attr = scala.xml.Attribute(null, "State", x.toString, attr) }
        case ("@ZipCode", _) => __obj.ZipCode foreach { x => attr = scala.xml.Attribute(null, "ZipCode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.PersonInfoShipTo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_ItemFormat extends scalaxb.XMLFormat[generated.Item] with scalaxb.CanWriteChildNodes[generated.Item] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Item] = seq match {
      case node: scala.xml.Node => Right(generated.Item(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@CustomerItemDesc").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CustomerItemDesc" -> _ },
        (node \ "@ItemID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@ItemID" -> _ },
        (node \ "@ProductLine").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@ProductLine" -> _ },
        (node \ "@UnitOfMeasure").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@UnitOfMeasure" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Item, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@CustomerItemDesc", _) => __obj.CustomerItemDesc foreach { x => attr = scala.xml.Attribute(null, "CustomerItemDesc", x.toString, attr) }
        case ("@ItemID", _) => __obj.ItemID foreach { x => attr = scala.xml.Attribute(null, "ItemID", x.toString, attr) }
        case ("@ProductLine", _) => __obj.ProductLine foreach { x => attr = scala.xml.Attribute(null, "ProductLine", x.toString, attr) }
        case ("@UnitOfMeasure", _) => __obj.UnitOfMeasure foreach { x => attr = scala.xml.Attribute(null, "UnitOfMeasure", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Item, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_PersonInfoShipTo2Format extends scalaxb.XMLFormat[generated.PersonInfoShipTo2] with scalaxb.CanWriteChildNodes[generated.PersonInfoShipTo2] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.PersonInfoShipTo2] = seq match {
      case node: scala.xml.Node => Right(generated.PersonInfoShipTo2(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@AddressLine1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine1" -> _ },
        (node \ "@AddressLine2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine2" -> _ },
        (node \ "@City").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@City" -> _ },
        (node \ "@Country").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Country" -> _ },
        (node \ "@DayPhone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@DayPhone" -> _ },
        (node \ "@EMailID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EMailID" -> _ },
        (node \ "@FirstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FirstName" -> _ },
        (node \ "@LastName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LastName" -> _ },
        (node \ "@State").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@State" -> _ },
        (node \ "@ZipCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ZipCode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.PersonInfoShipTo2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@AddressLine1", _) => __obj.AddressLine1 foreach { x => attr = scala.xml.Attribute(null, "AddressLine1", x.toString, attr) }
        case ("@AddressLine2", _) => __obj.AddressLine2 foreach { x => attr = scala.xml.Attribute(null, "AddressLine2", x.toString, attr) }
        case ("@City", _) => __obj.City foreach { x => attr = scala.xml.Attribute(null, "City", x.toString, attr) }
        case ("@Country", _) => __obj.Country foreach { x => attr = scala.xml.Attribute(null, "Country", x.toString, attr) }
        case ("@DayPhone", _) => __obj.DayPhone foreach { x => attr = scala.xml.Attribute(null, "DayPhone", x.toString, attr) }
        case ("@EMailID", _) => __obj.EMailID foreach { x => attr = scala.xml.Attribute(null, "EMailID", x.toString, attr) }
        case ("@FirstName", _) => __obj.FirstName foreach { x => attr = scala.xml.Attribute(null, "FirstName", x.toString, attr) }
        case ("@LastName", _) => __obj.LastName foreach { x => attr = scala.xml.Attribute(null, "LastName", x.toString, attr) }
        case ("@State", _) => __obj.State foreach { x => attr = scala.xml.Attribute(null, "State", x.toString, attr) }
        case ("@ZipCode", _) => __obj.ZipCode foreach { x => attr = scala.xml.Attribute(null, "ZipCode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.PersonInfoShipTo2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_LinePriceInfoFormat extends scalaxb.XMLFormat[generated.LinePriceInfo] with scalaxb.CanWriteChildNodes[generated.LinePriceInfo] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.LinePriceInfo] = seq match {
      case node: scala.xml.Node => Right(generated.LinePriceInfo(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@IsLinePriceForInformationOnly").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@IsLinePriceForInformationOnly" -> _ },
        (node \ "@ListPrice").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@ListPrice" -> _ },
        (node \ "@PricingQuantityStrategy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@PricingQuantityStrategy" -> _ },
        (node \ "@RetailPrice").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@RetailPrice" -> _ },
        (node \ "@UnitPrice").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@UnitPrice" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.LinePriceInfo, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@IsLinePriceForInformationOnly", _) => __obj.IsLinePriceForInformationOnly foreach { x => attr = scala.xml.Attribute(null, "IsLinePriceForInformationOnly", x.toString, attr) }
        case ("@ListPrice", _) => __obj.ListPrice foreach { x => attr = scala.xml.Attribute(null, "ListPrice", x.toString, attr) }
        case ("@PricingQuantityStrategy", _) => __obj.PricingQuantityStrategy foreach { x => attr = scala.xml.Attribute(null, "PricingQuantityStrategy", x.toString, attr) }
        case ("@RetailPrice", _) => __obj.RetailPrice foreach { x => attr = scala.xml.Attribute(null, "RetailPrice", x.toString, attr) }
        case ("@UnitPrice", _) => __obj.UnitPrice foreach { x => attr = scala.xml.Attribute(null, "UnitPrice", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.LinePriceInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_LineChargeFormat extends scalaxb.XMLFormat[generated.LineCharge] with scalaxb.CanWriteChildNodes[generated.LineCharge] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.LineCharge] = seq match {
      case node: scala.xml.Node => Right(generated.LineCharge(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@ChargeCategory").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargeCategory" -> _ },
        (node \ "@ChargeName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargeName" -> _ },
        (node \ "@ChargePerLine").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargePerLine" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.LineCharge, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ChargeCategory", _) => __obj.ChargeCategory foreach { x => attr = scala.xml.Attribute(null, "ChargeCategory", x.toString, attr) }
        case ("@ChargeName", _) => __obj.ChargeName foreach { x => attr = scala.xml.Attribute(null, "ChargeName", x.toString, attr) }
        case ("@ChargePerLine", _) => __obj.ChargePerLine foreach { x => attr = scala.xml.Attribute(null, "ChargePerLine", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.LineCharge, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_LineChargesFormat extends scalaxb.ElemNameParser[generated.LineCharges] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.LineCharges] =
      phrase(safeRep(scalaxb.ElemName(None, "LineCharge")) ^^
      { case p1 =>
      generated.LineCharges(p1 map { scalaxb.fromXML[generated.LineCharge](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.LineCharges, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LineCharge flatMap { scalaxb.toXML[generated.LineCharge](_, None, Some("LineCharge"), __scope, false) })
  }
  trait DefaultGenerated_LineTaxFormat extends scalaxb.XMLFormat[generated.LineTax] with scalaxb.CanWriteChildNodes[generated.LineTax] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.LineTax] = seq match {
      case node: scala.xml.Node => Right(generated.LineTax(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@ChargeCategory").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargeCategory" -> _ },
        (node \ "@ChargeName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargeName" -> _ },
        (node \ "@Tax").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@Tax" -> _ },
        (node \ "@TaxName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@TaxName" -> _ },
        (node \ "@TaxPercentage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@TaxPercentage" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.LineTax, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ChargeCategory", _) => __obj.ChargeCategory foreach { x => attr = scala.xml.Attribute(null, "ChargeCategory", x.toString, attr) }
        case ("@ChargeName", _) => __obj.ChargeName foreach { x => attr = scala.xml.Attribute(null, "ChargeName", x.toString, attr) }
        case ("@Tax", _) => __obj.Tax foreach { x => attr = scala.xml.Attribute(null, "Tax", x.toString, attr) }
        case ("@TaxName", _) => __obj.TaxName foreach { x => attr = scala.xml.Attribute(null, "TaxName", x.toString, attr) }
        case ("@TaxPercentage", _) => __obj.TaxPercentage foreach { x => attr = scala.xml.Attribute(null, "TaxPercentage", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.LineTax, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_LineTaxesFormat extends scalaxb.ElemNameParser[generated.LineTaxes] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.LineTaxes] =
      phrase(safeRep(scalaxb.ElemName(None, "LineTax")) ^^
      { case p1 =>
      generated.LineTaxes(p1 map { scalaxb.fromXML[generated.LineTax](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.LineTaxes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LineTax flatMap { scalaxb.toXML[generated.LineTax](_, None, Some("LineTax"), __scope, false) })
  }
  trait DefaultGenerated_OrderDateFormat extends scalaxb.XMLFormat[generated.OrderDate] with scalaxb.CanWriteChildNodes[generated.OrderDate] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.OrderDate] = seq match {
      case node: scala.xml.Node => Right(generated.OrderDate(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@ActualDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@ActualDate" -> _ },
        (node \ "@DateTypeId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@DateTypeId" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.OrderDate, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ActualDate", _) => __obj.ActualDate foreach { x => attr = scala.xml.Attribute(null, "ActualDate", x.toString, attr) }
        case ("@DateTypeId", _) => __obj.DateTypeId foreach { x => attr = scala.xml.Attribute(null, "DateTypeId", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.OrderDate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_OrderDatesFormat extends scalaxb.ElemNameParser[generated.OrderDates] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.OrderDates] =
      phrase((scalaxb.ElemName(None, "OrderDate")) ^^
      { case p1 =>
      generated.OrderDates(scalaxb.fromXML[generated.OrderDate](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated.OrderDates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.OrderDate](__obj.OrderDate, None, Some("OrderDate"), __scope, false))
  }
  trait DefaultGenerated_ExtnFormat extends scalaxb.XMLFormat[generated.Extn] with scalaxb.CanWriteChildNodes[generated.Extn] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Extn] = seq match {
      case node: scala.xml.Node => Right(generated.Extn(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@ExtnIsPromoEvaluated").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnIsPromoEvaluated" -> _ },
        (node \ "@ExtnIsReturnable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnIsReturnable" -> _ },
        (node \ "@ExtnWebLineNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnWebLineNumber" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Extn, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ExtnIsPromoEvaluated", _) => __obj.ExtnIsPromoEvaluated foreach { x => attr = scala.xml.Attribute(null, "ExtnIsPromoEvaluated", x.toString, attr) }
        case ("@ExtnIsReturnable", _) => __obj.ExtnIsReturnable foreach { x => attr = scala.xml.Attribute(null, "ExtnIsReturnable", x.toString, attr) }
        case ("@ExtnWebLineNumber", _) => __obj.ExtnWebLineNumber foreach { x => attr = scala.xml.Attribute(null, "ExtnWebLineNumber", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Extn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_OrderLineFormat extends scalaxb.ElemNameParser[generated.OrderLine] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.OrderLine] =
      phrase((scalaxb.ElemName(None, "Item")) ~ 
      (scalaxb.ElemName(None, "PersonInfoShipTo")) ~ 
      (scalaxb.ElemName(None, "LinePriceInfo")) ~ 
      (scalaxb.ElemName(None, "LineCharges")) ~ 
      (scalaxb.ElemName(None, "LineTaxes")) ~ 
      (scalaxb.ElemName(None, "OrderDates")) ~ 
      (scalaxb.ElemName(None, "Extn")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated.OrderLine(scalaxb.fromXML[generated.Item](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.PersonInfoShipTo2](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.LinePriceInfo](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.LineCharges](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.LineTaxes](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.OrderDates](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.Extn](p7, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@CarrierServiceCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CarrierServiceCode" -> _ },
        (node \ "@DeliveryMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@DeliveryMethod" -> _ },
        (node \ "@FulfillmentType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FulfillmentType" -> _ },
        (node \ "@GiftFlag").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@GiftFlag" -> _ },
        (node \ "@GiftWrap").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@GiftWrap" -> _ },
        (node \ "@LineType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LineType" -> _ },
        (node \ "@OrderedQty").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@OrderedQty" -> _ },
        (node \ "@PrimeLineNo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@PrimeLineNo" -> _ },
        (node \ "@SCAC").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@SCAC" -> _ },
        (node \ "@ShipNode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ShipNode" -> _ },
        (node \ "@SubLineNo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@SubLineNo" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.OrderLine, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@CarrierServiceCode", _) => __obj.CarrierServiceCode foreach { x => attr = scala.xml.Attribute(null, "CarrierServiceCode", x.toString, attr) }
        case ("@DeliveryMethod", _) => __obj.DeliveryMethod foreach { x => attr = scala.xml.Attribute(null, "DeliveryMethod", x.toString, attr) }
        case ("@FulfillmentType", _) => __obj.FulfillmentType foreach { x => attr = scala.xml.Attribute(null, "FulfillmentType", x.toString, attr) }
        case ("@GiftFlag", _) => __obj.GiftFlag foreach { x => attr = scala.xml.Attribute(null, "GiftFlag", x.toString, attr) }
        case ("@GiftWrap", _) => __obj.GiftWrap foreach { x => attr = scala.xml.Attribute(null, "GiftWrap", x.toString, attr) }
        case ("@LineType", _) => __obj.LineType foreach { x => attr = scala.xml.Attribute(null, "LineType", x.toString, attr) }
        case ("@OrderedQty", _) => __obj.OrderedQty foreach { x => attr = scala.xml.Attribute(null, "OrderedQty", x.toString, attr) }
        case ("@PrimeLineNo", _) => __obj.PrimeLineNo foreach { x => attr = scala.xml.Attribute(null, "PrimeLineNo", x.toString, attr) }
        case ("@SCAC", _) => __obj.SCAC foreach { x => attr = scala.xml.Attribute(null, "SCAC", x.toString, attr) }
        case ("@ShipNode", _) => __obj.ShipNode foreach { x => attr = scala.xml.Attribute(null, "ShipNode", x.toString, attr) }
        case ("@SubLineNo", _) => __obj.SubLineNo foreach { x => attr = scala.xml.Attribute(null, "SubLineNo", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.OrderLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Item](__obj.Item, None, Some("Item"), __scope, false),
        scalaxb.toXML[generated.PersonInfoShipTo2](__obj.PersonInfoShipTo, None, Some("PersonInfoShipTo"), __scope, false),
        scalaxb.toXML[generated.LinePriceInfo](__obj.LinePriceInfo, None, Some("LinePriceInfo"), __scope, false),
        scalaxb.toXML[generated.LineCharges](__obj.LineCharges, None, Some("LineCharges"), __scope, false),
        scalaxb.toXML[generated.LineTaxes](__obj.LineTaxes, None, Some("LineTaxes"), __scope, false),
        scalaxb.toXML[generated.OrderDates](__obj.OrderDates, None, Some("OrderDates"), __scope, false),
        scalaxb.toXML[generated.Extn](__obj.Extn, None, Some("Extn"), __scope, false))

  }

  trait DefaultGenerated_OrderLinesFormat extends scalaxb.ElemNameParser[generated.OrderLines] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.OrderLines] =
      phrase(safeRep(scalaxb.ElemName(None, "OrderLine")) ^^
      { case p1 =>
      generated.OrderLines(p1 map { scalaxb.fromXML[generated.OrderLine](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.OrderLines, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.OrderLine flatMap { scalaxb.toXML[generated.OrderLine](_, None, Some("OrderLine"), __scope, false) })
  }
  trait DefaultGenerated_PaymentDetailsFormat extends scalaxb.XMLFormat[generated.PaymentDetails] with scalaxb.CanWriteChildNodes[generated.PaymentDetails] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.PaymentDetails] = seq match {
      case node: scala.xml.Node => Right(generated.PaymentDetails(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@AuthAvs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AuthAvs" -> _ },
        (node \ "@AuthReturnCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@AuthReturnCode" -> _ },
        (node \ "@AuthorizationExpirationDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@AuthorizationExpirationDate" -> _ },
        (node \ "@AuthorizationID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@AuthorizationID" -> _ },
        (node \ "@ChargeType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargeType" -> _ },
        (node \ "@ProcessedAmount").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@ProcessedAmount" -> _ },
        (node \ "@Reference1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Reference1" -> _ },
        (node \ "@Reference2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Reference2" -> _ },
        (node \ "@RequestAmount").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@RequestAmount" -> _ },
        (node \ "@TranReturnMessage").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@TranReturnMessage" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.PaymentDetails, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@AuthAvs", _) => __obj.AuthAvs foreach { x => attr = scala.xml.Attribute(null, "AuthAvs", x.toString, attr) }
        case ("@AuthReturnCode", _) => __obj.AuthReturnCode foreach { x => attr = scala.xml.Attribute(null, "AuthReturnCode", x.toString, attr) }
        case ("@AuthorizationExpirationDate", _) => __obj.AuthorizationExpirationDate foreach { x => attr = scala.xml.Attribute(null, "AuthorizationExpirationDate", x.toString, attr) }
        case ("@AuthorizationID", _) => __obj.AuthorizationID foreach { x => attr = scala.xml.Attribute(null, "AuthorizationID", x.toString, attr) }
        case ("@ChargeType", _) => __obj.ChargeType foreach { x => attr = scala.xml.Attribute(null, "ChargeType", x.toString, attr) }
        case ("@ProcessedAmount", _) => __obj.ProcessedAmount foreach { x => attr = scala.xml.Attribute(null, "ProcessedAmount", x.toString, attr) }
        case ("@Reference1", _) => __obj.Reference1 foreach { x => attr = scala.xml.Attribute(null, "Reference1", x.toString, attr) }
        case ("@Reference2", _) => __obj.Reference2 foreach { x => attr = scala.xml.Attribute(null, "Reference2", x.toString, attr) }
        case ("@RequestAmount", _) => __obj.RequestAmount foreach { x => attr = scala.xml.Attribute(null, "RequestAmount", x.toString, attr) }
        case ("@TranReturnMessage", _) => __obj.TranReturnMessage foreach { x => attr = scala.xml.Attribute(null, "TranReturnMessage", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.PaymentDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_PersonInfoBillTo2Format extends scalaxb.XMLFormat[generated.PersonInfoBillTo2] with scalaxb.CanWriteChildNodes[generated.PersonInfoBillTo2] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.PersonInfoBillTo2] = seq match {
      case node: scala.xml.Node => Right(generated.PersonInfoBillTo2(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@AddressLine1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine1" -> _ },
        (node \ "@AddressLine2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AddressLine2" -> _ },
        (node \ "@City").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@City" -> _ },
        (node \ "@Country").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Country" -> _ },
        (node \ "@DayPhone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@DayPhone" -> _ },
        (node \ "@EMailID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EMailID" -> _ },
        (node \ "@FirstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FirstName" -> _ },
        (node \ "@LastName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LastName" -> _ },
        (node \ "@State").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@State" -> _ },
        (node \ "@ZipCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ZipCode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.PersonInfoBillTo2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@AddressLine1", _) => __obj.AddressLine1 foreach { x => attr = scala.xml.Attribute(null, "AddressLine1", x.toString, attr) }
        case ("@AddressLine2", _) => __obj.AddressLine2 foreach { x => attr = scala.xml.Attribute(null, "AddressLine2", x.toString, attr) }
        case ("@City", _) => __obj.City foreach { x => attr = scala.xml.Attribute(null, "City", x.toString, attr) }
        case ("@Country", _) => __obj.Country foreach { x => attr = scala.xml.Attribute(null, "Country", x.toString, attr) }
        case ("@DayPhone", _) => __obj.DayPhone foreach { x => attr = scala.xml.Attribute(null, "DayPhone", x.toString, attr) }
        case ("@EMailID", _) => __obj.EMailID foreach { x => attr = scala.xml.Attribute(null, "EMailID", x.toString, attr) }
        case ("@FirstName", _) => __obj.FirstName foreach { x => attr = scala.xml.Attribute(null, "FirstName", x.toString, attr) }
        case ("@LastName", _) => __obj.LastName foreach { x => attr = scala.xml.Attribute(null, "LastName", x.toString, attr) }
        case ("@State", _) => __obj.State foreach { x => attr = scala.xml.Attribute(null, "State", x.toString, attr) }
        case ("@ZipCode", _) => __obj.ZipCode foreach { x => attr = scala.xml.Attribute(null, "ZipCode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.PersonInfoBillTo2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_PaymentMethodFormat extends scalaxb.ElemNameParser[generated.PaymentMethod] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.PaymentMethod] =
      phrase((scalaxb.ElemName(None, "PaymentDetails")) ~ 
      (scalaxb.ElemName(None, "PersonInfoBillTo")) ^^
      { case p1 ~ p2 =>
      generated.PaymentMethod(scalaxb.fromXML[generated.PaymentDetails](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.PersonInfoBillTo2](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@ChargeSequence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@ChargeSequence" -> _ },
        (node \ "@CreditCardExpDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CreditCardExpDate" -> _ },
        (node \ "@CreditCardName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CreditCardName" -> _ },
        (node \ "@CreditCardNo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@CreditCardNo" -> _ },
        (node \ "@CreditCardType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CreditCardType" -> _ },
        (node \ "@DisplayCardNo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Short](x, scalaxb.ElemName(node) :: stack)) } map { "@DisplayCardNo" -> _ },
        (node \ "@DisplayCreditCardNo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Short](x, scalaxb.ElemName(node) :: stack)) } map { "@DisplayCreditCardNo" -> _ },
        (node \ "@FirstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FirstName" -> _ },
        (node \ "@LastName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@LastName" -> _ },
        (node \ "@MaxChargeLimit").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@MaxChargeLimit" -> _ },
        (node \ "@PaymentReference1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Short](x, scalaxb.ElemName(node) :: stack)) } map { "@PaymentReference1" -> _ },
        (node \ "@PaymentReference4").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@PaymentReference4" -> _ },
        (node \ "@PaymentReference6").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@PaymentReference6" -> _ },
        (node \ "@PaymentService").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@PaymentService" -> _ },
        (node \ "@PaymentType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@PaymentType" -> _ },
        (node \ "@UnlimitedCharges").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@UnlimitedCharges" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.PaymentMethod, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ChargeSequence", _) => __obj.ChargeSequence foreach { x => attr = scala.xml.Attribute(null, "ChargeSequence", x.toString, attr) }
        case ("@CreditCardExpDate", _) => __obj.CreditCardExpDate foreach { x => attr = scala.xml.Attribute(null, "CreditCardExpDate", x.toString, attr) }
        case ("@CreditCardName", _) => __obj.CreditCardName foreach { x => attr = scala.xml.Attribute(null, "CreditCardName", x.toString, attr) }
        case ("@CreditCardNo", _) => __obj.CreditCardNo foreach { x => attr = scala.xml.Attribute(null, "CreditCardNo", x.toString, attr) }
        case ("@CreditCardType", _) => __obj.CreditCardType foreach { x => attr = scala.xml.Attribute(null, "CreditCardType", x.toString, attr) }
        case ("@DisplayCardNo", _) => __obj.DisplayCardNo foreach { x => attr = scala.xml.Attribute(null, "DisplayCardNo", x.toString, attr) }
        case ("@DisplayCreditCardNo", _) => __obj.DisplayCreditCardNo foreach { x => attr = scala.xml.Attribute(null, "DisplayCreditCardNo", x.toString, attr) }
        case ("@FirstName", _) => __obj.FirstName foreach { x => attr = scala.xml.Attribute(null, "FirstName", x.toString, attr) }
        case ("@LastName", _) => __obj.LastName foreach { x => attr = scala.xml.Attribute(null, "LastName", x.toString, attr) }
        case ("@MaxChargeLimit", _) => __obj.MaxChargeLimit foreach { x => attr = scala.xml.Attribute(null, "MaxChargeLimit", x.toString, attr) }
        case ("@PaymentReference1", _) => __obj.PaymentReference1 foreach { x => attr = scala.xml.Attribute(null, "PaymentReference1", x.toString, attr) }
        case ("@PaymentReference4", _) => __obj.PaymentReference4 foreach { x => attr = scala.xml.Attribute(null, "PaymentReference4", x.toString, attr) }
        case ("@PaymentReference6", _) => __obj.PaymentReference6 foreach { x => attr = scala.xml.Attribute(null, "PaymentReference6", x.toString, attr) }
        case ("@PaymentService", _) => __obj.PaymentService foreach { x => attr = scala.xml.Attribute(null, "PaymentService", x.toString, attr) }
        case ("@PaymentType", _) => __obj.PaymentType foreach { x => attr = scala.xml.Attribute(null, "PaymentType", x.toString, attr) }
        case ("@UnlimitedCharges", _) => __obj.UnlimitedCharges foreach { x => attr = scala.xml.Attribute(null, "UnlimitedCharges", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.PaymentMethod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.PaymentDetails](__obj.PaymentDetails, None, Some("PaymentDetails"), __scope, false),
        scalaxb.toXML[generated.PersonInfoBillTo2](__obj.PersonInfoBillTo, None, Some("PersonInfoBillTo"), __scope, false))

  }

  trait DefaultGenerated_PaymentMethodsFormat extends scalaxb.ElemNameParser[generated.PaymentMethods] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.PaymentMethods] =
      phrase((scalaxb.ElemName(None, "PaymentMethod")) ^^
      { case p1 =>
      generated.PaymentMethods(scalaxb.fromXML[generated.PaymentMethod](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated.PaymentMethods, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.PaymentMethod](__obj.PaymentMethod, None, Some("PaymentMethod"), __scope, false))
  }
  trait DefaultGenerated_OrderHoldTypeFormat extends scalaxb.XMLFormat[generated.OrderHoldType] with scalaxb.CanWriteChildNodes[generated.OrderHoldType] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.OrderHoldType] = seq match {
      case node: scala.xml.Node => Right(generated.OrderHoldType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@HoldType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@HoldType" -> _ },
        (node \ "@ReasonText").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ReasonText" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.OrderHoldType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@HoldType", _) => __obj.HoldType foreach { x => attr = scala.xml.Attribute(null, "HoldType", x.toString, attr) }
        case ("@ReasonText", _) => __obj.ReasonText foreach { x => attr = scala.xml.Attribute(null, "ReasonText", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.OrderHoldType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_OrderHoldTypesFormat extends scalaxb.ElemNameParser[generated.OrderHoldTypes] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.OrderHoldTypes] =
      phrase((scalaxb.ElemName(None, "OrderHoldType")) ^^
      { case p1 =>
      generated.OrderHoldTypes(scalaxb.fromXML[generated.OrderHoldType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated.OrderHoldTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.OrderHoldType](__obj.OrderHoldType, None, Some("OrderHoldType"), __scope, false))
  }
  trait DefaultGenerated_HbcOrderHeaderAttrFormat extends scalaxb.XMLFormat[generated.HbcOrderHeaderAttr] with scalaxb.CanWriteChildNodes[generated.HbcOrderHeaderAttr] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.HbcOrderHeaderAttr] = seq match {
      case node: scala.xml.Node => Right(generated.HbcOrderHeaderAttr(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@FraudReference1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@FraudReference1" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.HbcOrderHeaderAttr, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@FraudReference1", _) => __obj.FraudReference1 foreach { x => attr = scala.xml.Attribute(null, "FraudReference1", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.HbcOrderHeaderAttr, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultGenerated_HbcOrderHeaderAttrListFormat extends scalaxb.ElemNameParser[generated.HbcOrderHeaderAttrList] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.HbcOrderHeaderAttrList] =
      phrase((scalaxb.ElemName(None, "HbcOrderHeaderAttr")) ^^
      { case p1 =>
      generated.HbcOrderHeaderAttrList(scalaxb.fromXML[generated.HbcOrderHeaderAttr](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated.HbcOrderHeaderAttrList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.HbcOrderHeaderAttr](__obj.HbcOrderHeaderAttr, None, Some("HbcOrderHeaderAttr"), __scope, false))
  }
  trait DefaultGenerated_Extn2Format extends scalaxb.ElemNameParser[generated.Extn2] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Extn2] =
      phrase((scalaxb.ElemName(None, "HbcOrderHeaderAttrList")) ^^
      { case p1 =>
      generated.Extn2(scalaxb.fromXML[generated.HbcOrderHeaderAttrList](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@ExtnAssociateName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnAssociateName" -> _ },
        (node \ "@ExtnClientID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Short](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnClientID" -> _ },
        (node \ "@ExtnCommLang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnCommLang" -> _ },
        (node \ "@ExtnCurrencyCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnCurrencyCode" -> _ },
        (node \ "@ExtnIsFiftyOne").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnIsFiftyOne" -> _ },
        (node \ "@ExtnReference1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ExtnReference1" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Extn2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ExtnAssociateName", _) => __obj.ExtnAssociateName foreach { x => attr = scala.xml.Attribute(null, "ExtnAssociateName", x.toString, attr) }
        case ("@ExtnClientID", _) => __obj.ExtnClientID foreach { x => attr = scala.xml.Attribute(null, "ExtnClientID", x.toString, attr) }
        case ("@ExtnCommLang", _) => __obj.ExtnCommLang foreach { x => attr = scala.xml.Attribute(null, "ExtnCommLang", x.toString, attr) }
        case ("@ExtnCurrencyCode", _) => __obj.ExtnCurrencyCode foreach { x => attr = scala.xml.Attribute(null, "ExtnCurrencyCode", x.toString, attr) }
        case ("@ExtnIsFiftyOne", _) => __obj.ExtnIsFiftyOne foreach { x => attr = scala.xml.Attribute(null, "ExtnIsFiftyOne", x.toString, attr) }
        case ("@ExtnReference1", _) => __obj.ExtnReference1 foreach { x => attr = scala.xml.Attribute(null, "ExtnReference1", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Extn2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.HbcOrderHeaderAttrList](__obj.HbcOrderHeaderAttrList, None, Some("HbcOrderHeaderAttrList"), __scope, false))
  }

  trait DefaultGenerated_OrderFormat extends scalaxb.ElemNameParser[generated.Order] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Order] =
      phrase((scalaxb.ElemName(None, "PersonInfoBillTo")) ~ 
      (scalaxb.ElemName(None, "PersonInfoShipTo")) ~ 
      (scalaxb.ElemName(None, "OrderLines")) ~ 
      (scalaxb.ElemName(None, "PaymentMethods")) ~ 
      opt(scalaxb.ElemName(None, "OrderHoldTypes")) ~ 
      (scalaxb.ElemName(None, "Extn")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated.Order(scalaxb.fromXML[generated.PersonInfoBillTo](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.PersonInfoShipTo](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.OrderLines](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated.PaymentMethods](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[generated.OrderHoldTypes](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated.Extn2](p6, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@Action").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Action" -> _ },
        (node \ "@AllocationRuleID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AllocationRuleID" -> _ },
        (node \ "@AuthorizedClient").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@AuthorizedClient" -> _ },
        (node \ "@BillToID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Short](x, scalaxb.ElemName(node) :: stack)) } map { "@BillToID" -> _ },
        (node \ "@CustomerContactID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Short](x, scalaxb.ElemName(node) :: stack)) } map { "@CustomerContactID" -> _ },
        (node \ "@CustomerEMailID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CustomerEMailID" -> _ },
        (node \ "@CustomerFirstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CustomerFirstName" -> _ },
        (node \ "@CustomerLastName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@CustomerLastName" -> _ },
        (node \ "@DocumentType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@DocumentType" -> _ },
        (node \ "@DraftOrderFlag").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@DraftOrderFlag" -> _ },
        (node \ "@EnteredBy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EnteredBy" -> _ },
        (node \ "@EnterpriseCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EnterpriseCode" -> _ },
        (node \ "@EntryType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@EntryType" -> _ },
        (node \ "@OrderDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@OrderDate" -> _ },
        (node \ "@OrderNo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@OrderNo" -> _ },
        (node \ "@SellerOrganizationCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@SellerOrganizationCode" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Order, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Action", _) => __obj.Action foreach { x => attr = scala.xml.Attribute(null, "Action", x.toString, attr) }
        case ("@AllocationRuleID", _) => __obj.AllocationRuleID foreach { x => attr = scala.xml.Attribute(null, "AllocationRuleID", x.toString, attr) }
        case ("@AuthorizedClient", _) => __obj.AuthorizedClient foreach { x => attr = scala.xml.Attribute(null, "AuthorizedClient", x.toString, attr) }
        case ("@BillToID", _) => __obj.BillToID foreach { x => attr = scala.xml.Attribute(null, "BillToID", x.toString, attr) }
        case ("@CustomerContactID", _) => __obj.CustomerContactID foreach { x => attr = scala.xml.Attribute(null, "CustomerContactID", x.toString, attr) }
        case ("@CustomerEMailID", _) => __obj.CustomerEMailID foreach { x => attr = scala.xml.Attribute(null, "CustomerEMailID", x.toString, attr) }
        case ("@CustomerFirstName", _) => __obj.CustomerFirstName foreach { x => attr = scala.xml.Attribute(null, "CustomerFirstName", x.toString, attr) }
        case ("@CustomerLastName", _) => __obj.CustomerLastName foreach { x => attr = scala.xml.Attribute(null, "CustomerLastName", x.toString, attr) }
        case ("@DocumentType", _) => __obj.DocumentType foreach { x => attr = scala.xml.Attribute(null, "DocumentType", x.toString, attr) }
        case ("@DraftOrderFlag", _) => __obj.DraftOrderFlag foreach { x => attr = scala.xml.Attribute(null, "DraftOrderFlag", x.toString, attr) }
        case ("@EnteredBy", _) => __obj.EnteredBy foreach { x => attr = scala.xml.Attribute(null, "EnteredBy", x.toString, attr) }
        case ("@EnterpriseCode", _) => __obj.EnterpriseCode foreach { x => attr = scala.xml.Attribute(null, "EnterpriseCode", x.toString, attr) }
        case ("@EntryType", _) => __obj.EntryType foreach { x => attr = scala.xml.Attribute(null, "EntryType", x.toString, attr) }
        case ("@OrderDate", _) => __obj.OrderDate foreach { x => attr = scala.xml.Attribute(null, "OrderDate", x.toString, attr) }
        case ("@OrderNo", _) => __obj.OrderNo foreach { x => attr = scala.xml.Attribute(null, "OrderNo", x.toString, attr) }
        case ("@SellerOrganizationCode", _) => __obj.SellerOrganizationCode foreach { x => attr = scala.xml.Attribute(null, "SellerOrganizationCode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Order, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.PersonInfoBillTo](__obj.PersonInfoBillTo, None, Some("PersonInfoBillTo"), __scope, false),
        scalaxb.toXML[generated.PersonInfoShipTo](__obj.PersonInfoShipTo, None, Some("PersonInfoShipTo"), __scope, false),
        scalaxb.toXML[generated.OrderLines](__obj.OrderLines, None, Some("OrderLines"), __scope, false),
        scalaxb.toXML[generated.PaymentMethods](__obj.PaymentMethods, None, Some("PaymentMethods"), __scope, false),
        __obj.OrderHoldTypes map { scalaxb.toXML[generated.OrderHoldTypes](_, None, Some("OrderHoldTypes"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated.Extn2](__obj.Extn, None, Some("Extn"), __scope, false))

  }

  trait DefaultGenerated_OrderListFormat extends scalaxb.ElemNameParser[generated.OrderList] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.OrderList] =
      phrase(safeRep(scalaxb.ElemName(None, "Order")) ^^
      { case p1 =>
      generated.OrderList(p1 map { scalaxb.fromXML[generated.Order](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@TotalNoOfOrders").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Byte](x, scalaxb.ElemName(node) :: stack)) } map { "@TotalNoOfOrders" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.OrderList, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@TotalNoOfOrders", _) => __obj.TotalNoOfOrders foreach { x => attr = scala.xml.Attribute(null, "TotalNoOfOrders", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.OrderList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Order flatMap { scalaxb.toXML[generated.Order](_, None, Some("Order"), __scope, false) })
  }


}

